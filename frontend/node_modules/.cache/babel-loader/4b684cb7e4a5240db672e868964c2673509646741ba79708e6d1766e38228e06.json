{"ast":null,"code":"/*\r\nimport React, { useState } from \"react\";\r\nimport \"./CSS/LoginSignup.css\";\r\nimport validator from 'validator';\r\n\r\nconst LoginSignup = () => {\r\n\r\n  const [state,setState] = useState(\"Login\");\r\n  const [formData,setFormData] = useState({username:\"\",email:\"\",password:\"\"});\r\n\r\n  const changeHandler = (e) => {\r\n    setFormData({...formData,[e.target.name]:e.target.value});\r\n    }\r\n\r\n  const login = async () => {\r\n    let dataObj;\r\n    await fetch('http://localhost:4000/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept:'application/form-data',\r\n        'Content-Type':'application/json',\r\n      },\r\n      body: JSON.stringify(formData),\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then((data) => {dataObj=data});\r\n      console.log(dataObj);\r\n      if (dataObj.success) {\r\n        localStorage.setItem('auth-token',dataObj.token);\r\n        window.location.replace(\"/\");\r\n      }\r\n      else\r\n      {\r\n        alert(dataObj.errors)\r\n      }\r\n  }\r\n\r\n  const signup = async () => {\r\n    //validate email\r\n    if (!validator.isEmail(formData.email)) {\r\n      alert(\"Please enter a valid email address\");\r\n      return;\r\n    }\r\n    \r\n    //Validate passwowrd\r\n    if (!validator.isStrongPassword(formData.password, {\r\n      minLength: 8, // Minimum length of 8 characters\r\n      minLowercase: 1, // Require at least 1 lowercase letter\r\n      minUppercase: 1, // Require at least 1 uppercase letter\r\n      minNumbers: 1, // Require at least 1 number\r\n      minSymbols: 1, // Require at least 1 special character\r\n      returnScore: false // Return the score of the password (optional)\r\n    })) {\r\n      alert(\"Please enter a strong password. It should contain at least 8 characters, including uppercase letters, lowercase letters, numbers, and special characters.\");\r\n      return;\r\n    }\r\n  \r\n    let dataObj;\r\n    await fetch('http://localhost:4000/signup', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept:'application/form-data',\r\n        'Content-Type':'application/json',\r\n      },\r\n      body: JSON.stringify(formData),\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then((data) => {dataObj=data});\r\n\r\n      if (dataObj.success) {\r\n        localStorage.setItem('auth-token',dataObj.token);\r\n        window.location.replace(\"/\");\r\n      }\r\n      else\r\n      {\r\n        alert(dataObj.errors)\r\n      }\r\n  }\r\n\r\n  return (\r\n    <div className=\"loginsignup\">\r\n      <div className=\"loginsignup-container\">\r\n        <h1>{state}</h1>\r\n        <div className=\"loginsignup-fields\">\r\n          {state===\"Sign Up\"?<input type=\"text\" placeholder=\"Your name\" name=\"username\" value={formData.username} onChange={changeHandler}/>:<></>}\r\n          <input type=\"email\" placeholder=\"Email address\" name=\"email\" value={formData.email} onChange={changeHandler}/>\r\n<i          nput type=\"password\" placeholder=\"Password\" name=\"password\" value={formData.password} onChange={changeHandler}/>\r\n        </div>\r\n\r\n        <button onClick={()=>{state===\"Login\"?login():signup()}}>Continue</button>\r\n\r\n        {state===\"Login\"?\r\n        <p className=\"loginsignup-login\">Create an account? <span onClick={()=>{setState(\"Sign Up\")}}>Click here</span></p>\r\n        :<p className=\"loginsignup-login\">Already have an account? <span onClick={()=>{setState(\"Login\")}}>Login here</span></p>}\r\n\r\n        <div className=\"loginsignup-agree\">\r\n          <input type=\"checkbox\" name=\"\" id=\"\" />\r\n          <p>By continuing, I agree to the terms of use & privacy policy.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginSignup;\r\n*/","map":{"version":3,"names":[],"sources":["C:/Users/DELL/perscholas/2024-RTT-03/SBA320/frontend/src/Pages/LoginSignup.jsx"],"sourcesContent":["/*\r\nimport React, { useState } from \"react\";\r\nimport \"./CSS/LoginSignup.css\";\r\nimport validator from 'validator';\r\n\r\nconst LoginSignup = () => {\r\n\r\n  const [state,setState] = useState(\"Login\");\r\n  const [formData,setFormData] = useState({username:\"\",email:\"\",password:\"\"});\r\n\r\n  const changeHandler = (e) => {\r\n    setFormData({...formData,[e.target.name]:e.target.value});\r\n    }\r\n\r\n  const login = async () => {\r\n    let dataObj;\r\n    await fetch('http://localhost:4000/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept:'application/form-data',\r\n        'Content-Type':'application/json',\r\n      },\r\n      body: JSON.stringify(formData),\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then((data) => {dataObj=data});\r\n      console.log(dataObj);\r\n      if (dataObj.success) {\r\n        localStorage.setItem('auth-token',dataObj.token);\r\n        window.location.replace(\"/\");\r\n      }\r\n      else\r\n      {\r\n        alert(dataObj.errors)\r\n      }\r\n  }\r\n\r\n  const signup = async () => {\r\n    //validate email\r\n    if (!validator.isEmail(formData.email)) {\r\n      alert(\"Please enter a valid email address\");\r\n      return;\r\n    }\r\n    \r\n    //Validate passwowrd\r\n    if (!validator.isStrongPassword(formData.password, {\r\n      minLength: 8, // Minimum length of 8 characters\r\n      minLowercase: 1, // Require at least 1 lowercase letter\r\n      minUppercase: 1, // Require at least 1 uppercase letter\r\n      minNumbers: 1, // Require at least 1 number\r\n      minSymbols: 1, // Require at least 1 special character\r\n      returnScore: false // Return the score of the password (optional)\r\n    })) {\r\n      alert(\"Please enter a strong password. It should contain at least 8 characters, including uppercase letters, lowercase letters, numbers, and special characters.\");\r\n      return;\r\n    }\r\n  \r\n    let dataObj;\r\n    await fetch('http://localhost:4000/signup', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept:'application/form-data',\r\n        'Content-Type':'application/json',\r\n      },\r\n      body: JSON.stringify(formData),\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then((data) => {dataObj=data});\r\n\r\n      if (dataObj.success) {\r\n        localStorage.setItem('auth-token',dataObj.token);\r\n        window.location.replace(\"/\");\r\n      }\r\n      else\r\n      {\r\n        alert(dataObj.errors)\r\n      }\r\n  }\r\n\r\n  return (\r\n    <div className=\"loginsignup\">\r\n      <div className=\"loginsignup-container\">\r\n        <h1>{state}</h1>\r\n        <div className=\"loginsignup-fields\">\r\n          {state===\"Sign Up\"?<input type=\"text\" placeholder=\"Your name\" name=\"username\" value={formData.username} onChange={changeHandler}/>:<></>}\r\n          <input type=\"email\" placeholder=\"Email address\" name=\"email\" value={formData.email} onChange={changeHandler}/>\r\n<i          nput type=\"password\" placeholder=\"Password\" name=\"password\" value={formData.password} onChange={changeHandler}/>\r\n        </div>\r\n\r\n        <button onClick={()=>{state===\"Login\"?login():signup()}}>Continue</button>\r\n\r\n        {state===\"Login\"?\r\n        <p className=\"loginsignup-login\">Create an account? <span onClick={()=>{setState(\"Sign Up\")}}>Click here</span></p>\r\n        :<p className=\"loginsignup-login\">Already have an account? <span onClick={()=>{setState(\"Login\")}}>Login here</span></p>}\r\n\r\n        <div className=\"loginsignup-agree\">\r\n          <input type=\"checkbox\" name=\"\" id=\"\" />\r\n          <p>By continuing, I agree to the terms of use & privacy policy.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginSignup;\r\n*/"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}